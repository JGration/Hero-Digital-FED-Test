{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/services/general.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'home', component: HomeComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {useHash:true})],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'Hero-Digital-Front-Test';\r\n}\r\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { GeneralService } from './services/general.service';\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MatIconModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [GeneralService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core'\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { GeneralService } from '../services/general.service';\r\nimport { ResponseModel } from '../models/general.model';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  console: Console;\r\n  form: FormGroup;\r\n  checkForm: FormGroup;\r\n  isFormValid: boolean = true;\r\n  nextPage: boolean = false;\r\n  response: any[];\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private db: GeneralService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.fb.group({\r\n      firstName: ['', [Validators.required, Validators.maxLength(40)]],\r\n      lastName: ['', [Validators.required, Validators.maxLength(40)]],\r\n      email: ['', Validators.required],\r\n      org: [''],\r\n      euResident: ['', Validators.required],\r\n      fieldName: ['']\r\n    })\r\n    this.checkForm = this.fb.group({\r\n      Advances: [true],\r\n        Alerts: [false],\r\n        Other: [false]\r\n    })\r\n    this.checkForm.valueChanges.subscribe(() => {\r\n      if(this.checkForm.get('Advances').value || this.checkForm.get('Alerts').value || this.checkForm.get('Other').value){\r\n        this.isFormValid = true;\r\n      }\r\n      else{\r\n        this.isFormValid = false;\r\n      }\r\n    })\r\n  }\r\n\r\n  reset() {\r\n    this.form.reset();\r\n    this.checkForm.reset();\r\n    this.checkForm.get('Advances').setValue(false); this.checkForm.get('Alerts').setValue(false); this.checkForm.get('Other').setValue(false);\r\n  }\r\n\r\n  submit(){\r\n    this.form.get('fieldName').setValue(this.checkForm.value);\r\n    console.log(encodeURI(JSON.stringify(this.form.value)))\r\n     let service: Observable<any>\r\n     service = this.db.postForm(encodeURI(JSON.stringify(this.form.value)))\r\n    service.subscribe(response => {\r\n      this.nextPage = true;\r\n      this.db.getSuccess().subscribe(responseStatus => {\r\n        this.response = responseStatus\r\n      })\r\n    }, (err) => {\r\n      this.db.getError().subscribe(responseStatus => this.response = responseStatus)\r\n      this.nextPage = true;\r\n    })\r\n  }\r\n}\r\n\r\n","<div *ngIf=\"!nextPage\" class=\"main-content\">\r\n    <h2>Sign up for email updates</h2>\r\n    <p>*Indicates required Fields</p>\r\n    <mat-form class=\"content-form\" [formGroup]=\"form\">\r\n        <div class=\"error-messages\">\r\n            <div *ngIf=\"form.get('firstName').invalid && (form.get('firstName').dirty || form.get('firstName').touched)\">First name is required</div>\r\n            <div *ngIf=\"form.get('lastName').invalid && (form.get('lastName').dirty || form.get('lastName').touched)\">Last name is required</div>\r\n            <div *ngIf=\"form.get('email').invalid && (form.get('email').dirty || form.get('email').touched)\">A valid Email address is required</div>\r\n            <div *ngIf=\"form.get('euResident').invalid && (form.get('euResident').dirty || form.get('euResident').touched)\">Answer of European Residency is required</div>\r\n            <div *ngIf=\"!isFormValid\">At least one of the checkboxes is required</div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"form-input\">\r\n                <label>First Name*</label><br>\r\n                <input type=\"text\" formControlName=\"firstName\" maxlength=\"40\">\r\n            </div>\r\n            <div class=\"form-input\">\r\n                <label>Last Name*</label><br>\r\n                <input type=\"text\" formControlName=\"lastName\" maxlength=\"40\">\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"form-input\">\r\n                <label>Email Address*</label><br>\r\n                <input type=\"email\" formControlName=\"email\" ngModel email>\r\n            </div>\r\n            <div class=\"form-input\">\r\n                <label>Organization</label><br>\r\n                <input type=\"text\" formControlName=\"org\">\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"form-input\">\r\n                <label>EU Resident*</label><br>\r\n                <mat-select #selectEUresident disableOptionCentering class=\"form-control\" formControlName=\"euResident\" panelClass=\"panel-custom\" [ngClass]=\"{'panel-open': selectEUresident.panelOpen}\" aria-label=\"Dropdown List with custom arrow to answer if user is an European Resident \">\r\n                    <mat-option value='' selected hidden disabled>- Select One -</mat-option>\r\n                    <mat-option value=Yes>Yes</mat-option>\r\n                    <mat-option value=No>No</mat-option>\r\n                </mat-select>\r\n            </div>\r\n        </div>\r\n    </mat-form>\r\n    <mat-form class=\"content-form\" [formGroup]=\"checkForm\">\r\n        <div class=\"row\">\r\n            <section>\r\n                <mat-checkbox class=\"form-checkbox\" formControlName=\"Advances\" required>Advances</mat-checkbox>\r\n                <mat-checkbox class=\"form-checkbox\" formControlName=\"Alerts\" required>Alerts</mat-checkbox>\r\n                <mat-checkbox class=\"form-checkbox\" formControlName=\"Other\" required>Other</mat-checkbox>\r\n            </section>\r\n        </div>\r\n    </mat-form>\r\n    <div class=\"error-messages mobile\">\r\n        <div *ngIf=\"form.get('firstName').invalid && (form.get('firstName').dirty || form.get('firstName').touched)\">First name is required</div>\r\n        <div *ngIf=\"form.get('lastName').invalid && (form.get('lastName').dirty || form.get('lastName').touched)\">Last name is required</div>\r\n        <div *ngIf=\"form.get('email').invalid && (form.get('email').dirty || form.get('email').touched)\">A valid Email address is required</div>\r\n        <div *ngIf=\"form.get('euResident').invalid && (form.get('euResident').dirty || form.get('euResident').touched)\">Answer of European Residency is required</div>\r\n        <div *ngIf=\"checkForm.get('Advances').value === false && checkForm.get('Alerts').value === false && checkForm.get('Other').value === false\">At least one of the checkboxes is required</div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <button mat-raised-button class=\"class-button submit\" [disabled]=\"!form.valid || !isFormValid\" (click)=\"submit()\">Submit</button>\r\n        <button mat-raised-button (click)=\"reset()\" class=\"class-button\">Reset</button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"main-content result-page\" *ngIf=\"nextPage\">\r\n    <div class=\"main-message\">\r\n        <div *ngIf=\"!response\">\r\n            <h2>Loading...</h2>\r\n        </div>\r\n        <div *ngIf=\"response\">\r\n            <h2>\r\n                <mat-icon *ngIf=\"response.status === 'success'\" style=\"color: green; font-weight: 600; margin-left: -1em;\" aria-label=\"check-mark\">done</mat-icon> {{ response.status | titlecase }}</h2>\r\n            <p>{{ response.message }}</p>\r\n        </div>\r\n    </div>\r\n\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ResponseModel } from '../models/general.model';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n    observe: 'response'\r\n  }),\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GeneralService {\r\n\r\n  private responseUrl: string = 'http://localhost:3000/responses';\r\n  private postUrl: string = 'http://localhost:3000/posts';\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getSuccess(): Observable<any>{\r\n    return this.http.get<any>(this.responseUrl + '/1')\r\n  }\r\n  getError(): Observable<any>{\r\n    return this.http.get<any>(this.responseUrl + '/2')\r\n  }\r\n  postForm(obj: any): Observable<any> {\r\n    return this.http.post(this.postUrl, decodeURI(obj), httpOptions) \r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}